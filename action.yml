name: 'Lacework Scanner'
description: "Scan container images for vulnerabitilies using Lacework"
inputs:
  LW_ACCOUNT_NAME:
    description: "Your Lacework account name. For example, if your login URL is mycompany.lacework.net, the account name is mycompany."
    required: true
  LW_ACCESS_TOKEN:
    description: "Authorization token. Copy and paste the token from the inline scanner integration created in the Lacework console."
    required: true
  IMAGE_NAME:
    description: "Name of the container image you want to scan, for example, `node`."
    required: false
  IMAGE_TAG:
    description: "Tag of the container image you want to scan, for example, `12.18.2-alpine`."
    required: false
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps:
    - id: tags
      uses: actions/github-script@v6
      with:
        script: |
          const imageTag = require('./image_tag');
          console.log(core.getInput("IMAGE_TAG"));
          return(imageTag.processNameAndTag({
            IMAGE_NAME: core.getInput("IMAGE_NAME"),
            IMAGE_TAG: core.getInput("IMAGE_TAG")
          }))
    - id: test
      run: echo '${{ toJSON(steps.tags)}}'
      shell: bash
    # - id: image-tags
    #   run: ./split_image_tag.sh ${{ inputs.tags }}
    #   shell: bash
    # - name: dump context
    #   run: env
    #   shell: bash
    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: lacework-scan-results
    #     path: lw-scan-result.*
    # - uses: actions/github-script@v6
    #   with:
    #     script: |
    #       //const core = require('@actions/core');
    #       //const github = require('@actions/github');
    #       //console.log(context);
    #       const policy = require('./policy.js');
    #       let policy_result = policy.result(github);
          
    #       await github.rest.issues.createComment({
    #           issue_number: context.issue.number,
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           body: policy_result.message
    #       })
    #       process.exit(policy_result.code)
